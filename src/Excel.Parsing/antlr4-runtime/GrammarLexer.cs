//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/dmyko/Documents/Programming/dotnet/ExcelForAndroid/src/Excel.Parsing/Grammar.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class GrammarLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NUMBER=1, IDENTIFIER=2, INT=3, EXPONENT=4, MULTIPLY=5, DIVIDE=6, SUBTRACT=7, 
		ADD=8, LPAREN=9, RPAREN=10, LESS=11, GREATER=12, LESS_EQUAL=13, GREATER_EQUAL=14, 
		EQUAL=15, NOT_EQUAL=16, NOT=17, OR=18, AND=19, WS=20;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", "SUBTRACT", 
		"ADD", "LPAREN", "RPAREN", "LESS", "GREATER", "LESS_EQUAL", "GREATER_EQUAL", 
		"EQUAL", "NOT_EQUAL", "NOT", "OR", "AND", "WS"
	};


	public GrammarLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'^'", "'*'", "'/'", "'-'", "'+'", "'('", "')'", 
		"'<'", "'>'", "'<='", "'>='", "'=='", "'<>'", "'!'", "'||'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NUMBER", "IDENTIFIER", "INT", "EXPONENT", "MULTIPLY", "DIVIDE", 
		"SUBTRACT", "ADD", "LPAREN", "RPAREN", "LESS", "GREATER", "LESS_EQUAL", 
		"GREATER_EQUAL", "EQUAL", "NOT_EQUAL", "NOT", "OR", "AND", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Grammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static GrammarLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,20,105,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,3,0,
		45,8,0,1,1,4,1,48,8,1,11,1,12,1,49,1,1,1,1,5,1,54,8,1,10,1,12,1,57,9,1,
		1,2,4,2,60,8,2,11,2,12,2,61,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,
		19,1,19,1,19,0,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,1,0,4,2,0,65,90,
		97,122,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,108,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,47,1,0,0,0,5,59,1,0,0,0,7,63,
		1,0,0,0,9,65,1,0,0,0,11,67,1,0,0,0,13,69,1,0,0,0,15,71,1,0,0,0,17,73,1,
		0,0,0,19,75,1,0,0,0,21,77,1,0,0,0,23,79,1,0,0,0,25,81,1,0,0,0,27,84,1,
		0,0,0,29,87,1,0,0,0,31,90,1,0,0,0,33,93,1,0,0,0,35,95,1,0,0,0,37,98,1,
		0,0,0,39,101,1,0,0,0,41,44,3,5,2,0,42,43,5,46,0,0,43,45,3,5,2,0,44,42,
		1,0,0,0,44,45,1,0,0,0,45,2,1,0,0,0,46,48,7,0,0,0,47,46,1,0,0,0,48,49,1,
		0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,51,1,0,0,0,51,55,7,1,0,0,52,54,7,
		2,0,0,53,52,1,0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,4,1,0,
		0,0,57,55,1,0,0,0,58,60,2,48,57,0,59,58,1,0,0,0,60,61,1,0,0,0,61,59,1,
		0,0,0,61,62,1,0,0,0,62,6,1,0,0,0,63,64,5,94,0,0,64,8,1,0,0,0,65,66,5,42,
		0,0,66,10,1,0,0,0,67,68,5,47,0,0,68,12,1,0,0,0,69,70,5,45,0,0,70,14,1,
		0,0,0,71,72,5,43,0,0,72,16,1,0,0,0,73,74,5,40,0,0,74,18,1,0,0,0,75,76,
		5,41,0,0,76,20,1,0,0,0,77,78,5,60,0,0,78,22,1,0,0,0,79,80,5,62,0,0,80,
		24,1,0,0,0,81,82,5,60,0,0,82,83,5,61,0,0,83,26,1,0,0,0,84,85,5,62,0,0,
		85,86,5,61,0,0,86,28,1,0,0,0,87,88,5,61,0,0,88,89,5,61,0,0,89,30,1,0,0,
		0,90,91,5,60,0,0,91,92,5,62,0,0,92,32,1,0,0,0,93,94,5,33,0,0,94,34,1,0,
		0,0,95,96,5,124,0,0,96,97,5,124,0,0,97,36,1,0,0,0,98,99,5,38,0,0,99,100,
		5,38,0,0,100,38,1,0,0,0,101,102,7,3,0,0,102,103,1,0,0,0,103,104,6,19,0,
		0,104,40,1,0,0,0,5,0,44,49,55,61,1,0,1,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
